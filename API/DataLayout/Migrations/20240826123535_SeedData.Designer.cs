// <auto-generated />
using System;
using DataLayout.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayout.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240826123535_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayout.Model.Article", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AdminApproval")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCounter")
                        .HasColumnType("int");

                    b.Property<int>("PluralViewedCounter")
                        .HasColumnType("int");

                    b.Property<int>("SingularViewedCounter")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AdminApproval = true,
                            AuthorId = "3",
                            CategoryId = 1,
                            CreateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3552),
                            EditionDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3554),
                            LikeCounter = 10,
                            PluralViewedCounter = 50,
                            SingularViewedCounter = 10,
                            Text = "deneme 1 2 3 .....",
                            Title = "text",
                            UpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3553)
                        },
                        new
                        {
                            ID = 2,
                            AdminApproval = true,
                            AuthorId = "4",
                            CategoryId = 3,
                            CreateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3556),
                            EditionDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3557),
                            LikeCounter = 20,
                            PluralViewedCounter = 150,
                            SingularViewedCounter = 20,
                            Text = "deneme 1 2 3 .....",
                            Title = "Article 2 ",
                            UpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3557)
                        });
                });

            modelBuilder.Entity("DataLayout.Model.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ArticleId = 2,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("DataLayout.Model.AuthorCategory", b =>
                {
                    b.Property<string>("AuthorRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("AuthorRoleId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AuthorCategory");

                    b.HasData(
                        new
                        {
                            AuthorRoleId = "3",
                            CategoryId = 1
                        },
                        new
                        {
                            AuthorRoleId = "4",
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("DataLayout.Model.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Sağlık"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Bilim"
                        });
                });

            modelBuilder.Entity("DataLayout.Model.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("AdminApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AdminApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCounter")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AdminApproval = true,
                            AdminApprovalDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3585),
                            ArticleId = 1,
                            CreateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3583),
                            LikeCounter = 5,
                            Text = "gayet başarılı",
                            UpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3585),
                            UserId = "1"
                        },
                        new
                        {
                            ID = 2,
                            AdminApproval = true,
                            AdminApprovalDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3589),
                            ArticleId = 2,
                            CreateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3587),
                            LikeCounter = 10,
                            Text = "güzel yazı elinize sağlık",
                            UpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3588),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("DataLayout.Model.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID");

                    b.HasIndex("ArticleId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataLayout.Model.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DataLayout.Model.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Saglık"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Bilim"
                        });
                });

            modelBuilder.Entity("DataLayout.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ProfileUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCategory");
                });

            modelBuilder.Entity("DataLayout.Model.AuthorRole", b =>
                {
                    b.HasBaseType("DataLayout.Model.User");

                    b.HasDiscriminator().HasValue("AuthorRole");

                    b.HasData(
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b3666dc-7e42-4af0-912a-43a58bbe45c7",
                            Email = "ayse@example.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfileUpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3622),
                            SecurityStamp = "faf9d842-da48-4817-99e3-37266e72272a",
                            TwoFactorEnabled = false,
                            UserName = "ayseyilmaz"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a077519d-343c-4d75-82a8-efa527d5c77c",
                            Email = "mehmeter@example.com",
                            EmailConfirmed = false,
                            FirstName = "Mehmet",
                            LastName = "Er",
                            LockoutEnabled = false,
                            Phone = "0987654321",
                            PhoneNumberConfirmed = false,
                            ProfileUpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3628),
                            SecurityStamp = "8ede6c42-13af-4093-89f6-355999e937a2",
                            TwoFactorEnabled = false,
                            UserName = "mehmeter"
                        });
                });

            modelBuilder.Entity("DataLayout.Model.userRole", b =>
                {
                    b.HasBaseType("DataLayout.Model.User");

                    b.HasDiscriminator().HasValue("userRole");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11daa9f1-9a67-4bb1-b465-4f88d0ca18d7",
                            Email = "johndoe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Phone = "1234567890",
                            PhoneNumberConfirmed = false,
                            ProfileUpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3518),
                            SecurityStamp = "8cb9e768-786f-41ea-9251-f70346a3dfee",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35c0f960-39c6-4d73-85f1-41879aac4de4",
                            Email = "janesmith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            Phone = "0987654321",
                            PhoneNumberConfirmed = false,
                            ProfileUpdateDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3523),
                            SecurityStamp = "d36e0a0c-a512-4bde-8e71-a22519aa5c7d",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        });
                });

            modelBuilder.Entity("DataLayout.Model.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("RoleApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RoleApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleCounter")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            RoleApproval = true,
                            RoleApprovalDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3182),
                            RoleCounter = 1
                        },
                        new
                        {
                            Id = "2",
                            Name = "Author",
                            NormalizedName = "AUTHOR",
                            RoleApproval = true,
                            RoleApprovalDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3255),
                            RoleCounter = 2
                        },
                        new
                        {
                            Id = "3",
                            Name = "User",
                            NormalizedName = "USER",
                            RoleApproval = true,
                            RoleApprovalDate = new DateTime(2024, 8, 26, 15, 35, 35, 524, DateTimeKind.Local).AddTicks(3259),
                            RoleCounter = 2
                        });
                });

            modelBuilder.Entity("DataLayout.Model.Article", b =>
                {
                    b.HasOne("DataLayout.Model.AuthorRole", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayout.Model.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataLayout.Model.ArticleTag", b =>
                {
                    b.HasOne("DataLayout.Model.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayout.Model.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DataLayout.Model.AuthorCategory", b =>
                {
                    b.HasOne("DataLayout.Model.AuthorRole", "AuthorRole")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("AuthorRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayout.Model.Category", "Category")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorRole");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataLayout.Model.Comment", b =>
                {
                    b.HasOne("DataLayout.Model.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayout.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayout.Model.Image", b =>
                {
                    b.HasOne("DataLayout.Model.Article", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("DataLayout.Model.Notification", b =>
                {
                    b.HasOne("DataLayout.Model.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayout.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayout.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayout.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayout.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserCategory", b =>
                {
                    b.HasOne("DataLayout.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayout.Model.userRole", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayout.Model.Article", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataLayout.Model.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("AuthorCategories");
                });

            modelBuilder.Entity("DataLayout.Model.Tag", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("DataLayout.Model.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("DataLayout.Model.AuthorRole", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("AuthorCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
